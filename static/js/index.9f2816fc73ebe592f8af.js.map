{"version":3,"sources":["webpack:///./src/containers/FilterLink.js","webpack:///./src/components/todo/Link.js","webpack:///./src/components/todo/TodoList.js","webpack:///./src/reducers/todos.js","webpack:///./src/reducers/visibilityFilter.js","webpack:///./src/components/todo/Footer.js","webpack:///./src/components/reddit/Posts.js","webpack:///./src/midddleware/logger.js","webpack:///./src/reducers/index.js","webpack:///./src/containers/VisibilityTodoList.js","webpack:///./src/containers/AppTodo.js","webpack:///./src/reducers/subreddit.js","webpack:///./src/actions/todo.js","webpack:///./src/components/todo/Todo.js","webpack:///./src/components/reddit/Picker.js","webpack:///./src/actions/subreddit.js","webpack:///./src/components/App.js","webpack:///./src/constants/todoActionType.js","webpack:///./src/index.js","webpack:///./src/asyncApp.js"],"names":["_reactRedux","__webpack_require__","_todo","d","e","__esModule","default","t","connect","state","ownProps","active","filter","visibilityFilter","dispatch","onClick","setVisibilityFilter","Link","r","children","_react2","createElement","href","preventDefault","u","todos","onTodoClick","getSubreddit","map","todo","index","_Todo2","_extends","key","action","type","id","text","completed","l","_FilterLink2","ZXo9","n","Object","defineProperty","value","_react","Posts","Component","render","this","props","posts","post","i","title","propTypes","PropTypes","array","isRequired","logger","store","next","console","log","result","getState","crashReporter","err","error","Raven","captureException","extra","_redux","_subreddit","combineReducers","postsBySubreddit","selectedSubreddit","toggleTodo","fetchPosts","TodoList","AddTodo","input","onSubmit","trim","addTodo","ref","node","INVALIDATE_SUBREDDIT","RECEIVE_POSTS","REQUEST_POSTS","assign","[object Object]","subreddit","isFetching","didInvalidate","items","lastUpdated","receivedAt","SELECT_SUBREDDIT","_todoActionType","nextTodoId","ADD_TODO","TOGGLE_TODO","SET_VISIBILITY_FILTER","style","textDecoration","Picker","onChange","options","target","option","arrayOf","string","func","selectSubreddit","invalidateSubreddit","fetchPostsIfNeeded","fetch","then","response","json","data","child","Date","now","r8ck","_AppTodo2","_VisibilityTodoList2","_Footer2","sMIZ","REMOVE_TODO","VisibilityFilters","SHOW_ALL","SHOW_COMPLETED","SHOW_ACTIVE","tjUo","p","_reactDom","_reduxDevtoolsExtension","_reactRouterDom","_logger","c","f","createStore","todoApp","composeWithDevTools","applyMiddleware","thunkMiddleware","Provider","BrowserRouter","Route","path","component","AsyncApp","document","getElementById","txfS","o","a","s","constructor","super","handleChange","bind","handleRefreshClick","componentWillReceiveProps","nextProps","nextSubreddit","_Picker2","toLocaleTimeString","length","opacity","_Posts2","bool","number"],"mappings":"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","file":"index.9f2816fc73ebe592f8af.js","sourcesContent":["import { connect } from \"react-redux\";\nimport { setVisibilityFilter } from \"../actions/todo\";\nimport Link from \"../components/todo/Link\";\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    onClick: () => {\n      dispatch(setVisibilityFilter(ownProps.filter));\n    }\n  };\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    active: ownProps.filter === state.visibilityFilter\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Link);\n","import React, { Component } from 'react';\n\nconst Link = ({ active,children,onClick})=> {\n  if (active) { \n    return <span>{children}</span>\n  }\n    return (\n      <a\n        href=\"\"\n        onClick={\n          e => { \n            e.preventDefault()\n            onClick()\n          }\n        }\n      >\n        {children} \n      </a>\n    );\n}\n\nexport default Link;","import React, { Component } from 'react';\nimport Todo from './Todo';\n\nconst TodoList = ({ todos, onTodoClick,getSubreddit }) => {\n    return (\n      <ul>\n        {\n          todos&&todos.map((todo, index) => (\n            <Todo key={index} {...todo} onClick={() => { \n              onTodoClick(index + 1)\n              getSubreddit(index)\n            }}></Todo>\n          ))\n        }\n      </ul>\n    );\n}\n\n\nexport default TodoList;","const todos = (state = [], action) => {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return [\n        ...state,\n        {\n          id: action.id,\n          text: action.text,\n          completed: false\n        }\n      ]\n    case 'TOGGLE_TODO':\n      return state.map(todo =>\n        (todo.id === action.id)\n          ? {...todo, completed: !todo.completed}\n          : todo\n      )\n    default:\n      return state\n  }\n}\n\nexport default todos","const visibilityFilter = (state = 'SHOW_ALL', action) => {\n  switch (action.type) {\n    case 'SET_VISIBILITY_FILTER':\n      return action.filter\n    default:\n      return state\n  }\n}\n\nexport default visibilityFilter","import React from \"react\";\nimport FilterLink from \"../../containers/FilterLink\";\n\nconst Footer = () => (\n  <p>\n    Show: <FilterLink filter=\"SHOW_ALL\">All</FilterLink>\n    {\", \"}\n    <FilterLink filter=\"SHOW_ACTIVE\">Active</FilterLink>\n    {\", \"}\n    <FilterLink filter=\"SHOW_COMPLETED\">Completed</FilterLink>\n  </p>\n);\n\nexport default Footer;\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport default class Posts extends Component {\n  render() {\n    return (\n      <ul>\n        {this.props.posts.map((post, i) =>\n          <li key={i}>{post.title}</li>\n        )}\n      </ul>\n    )\n  }\n}\n\nPosts.propTypes = {\n  posts: PropTypes.array.isRequired\n}","const logger = store => next => action => {\n  console.log(\"dispatching\", action);\n  let result = next(action);\n  console.log(\"next state\", store.getState());\n  return result;\n};\nconst crashReporter = store => next => action => {\n  try {\n    return next(action);\n  } catch (err) {\n    console.error(\"Caught an exception!\", err);\n    Raven.captureException(err, {\n      extra: {\n        action,\n        state: store.getState()\n      }\n    });\n    throw err;\n  }\n};\n// 简单\n// const createMiddleWare = (store,middlewras) => { \n//   middlewras = amiddlewras.split();\n//   middlewras = middlewras.reverse();\n//   middlewras.forEach(middlewra=>store.dispatch=middlewra(store))\n// }\n\nconst createMiddleWare = (store,middlewares) => { \n  middlewares = middlewares.split();\n  middlewares = middlewares.reverse();\n  const dispatch = store.dispatch;\n  middlewares.forEach((middleware) => { \n    dispatch=middlewares(store)(dispatch)\n  } \n  )\n  return {\n    ...store,\n    dispatch\n      } \n}\n//一个大的闭包  一直没有被释放\n// 每个middleware 都会返回一个 地址一直没有被释放知道 吃法dispatch \n// 最后一个 middleware先执行\n// \nexport { logger, crashReporter };\n","import { combineReducers } from 'redux'\nimport todos from './todos'\nimport visibilityFilter from './visibilityFilter'\nimport {  postsBySubreddit,\n  selectedSubreddit} from './subreddit';\n\nexport default combineReducers({\n  todos,\n  visibilityFilter,\n  postsBySubreddit,\n  selectedSubreddit\n})","import { connect } from \"react-redux\";\nimport { toggleTodo } from \"../actions/todo\";\nimport TodoList from \"../components/todo/TodoList\";\nimport { fetchPosts } from '../actions/subreddit';\nconst getVisibleTodos = (todos, filter) => {\n  switch (filter) {\n    case \"SHOW_ALL\":\n      return todos;\n    case \"SHOW_COMPLETED\":\n      return todos.filter(t => t.completed);\n    case \"SHOW_ACTIVE\":\n      return todos.filter(t => !t.completed);\n  }\n};\nconst mapStateToProps = state => {\n  return {\n    todos: getVisibleTodos(state.todos, state.visibilityFilter)\n  };\n};\n\nconst mapDisPatchToProps = dispatch => {\n  return {\n    onTodoClick: id => {\n      dispatch(toggleTodo(id));\n    },\n    getSubreddit: id => { \n      dispatch(fetchPosts(id));\n    }\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDisPatchToProps\n)(TodoList);\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { addTodo } from '../actions/todo'\n\nlet AddTodo = ({ dispatch }) => {\n  let input\n\n  return (\n    <div>\n      <form\n        onSubmit={e => {\n          e.preventDefault()\n          if (!input.value.trim()) {\n            return\n          }\n          dispatch(addTodo(input.value))\n          input.value = ''\n        }}\n      >\n        <input\n          ref={node => {\n            input = node\n          }}\n        />\n        <button type=\"submit\">\n          Add Todo\n        </button>\n      </form>\n    </div>\n  )\n}\nAddTodo = connect()(AddTodo)\n\nexport default AddTodo","import { combineReducers } from 'redux'\nimport {\n  SELECT_SUBREDDIT,\n  INVALIDATE_SUBREDDIT,\n  REQUEST_POSTS,\n  RECEIVE_POSTS\n} from '../actions/subreddit.js'\n\nfunction selectedSubreddit(state = 'reactjs', action) {\n  switch (action.type) {\n  case SELECT_SUBREDDIT:\n    return action.subreddit\n  default:\n    return state\n  }\n}\n\nfunction posts(\n  state = {\n    isFetching: false,\n    didInvalidate: false,\n    items: []\n  },\n  action\n) {\n  switch (action.type) {\n    case INVALIDATE_SUBREDDIT:\n      return Object.assign({}, state, {\n        didInvalidate: true\n      })\n    case REQUEST_POSTS:\n      return Object.assign({}, state, {\n        isFetching: true,\n        didInvalidate: false\n      })\n    case RECEIVE_POSTS:\n      return Object.assign({}, state, {\n        isFetching: false,\n        didInvalidate: false,\n        items: action.posts,\n        lastUpdated: action.receivedAt\n      })\n    default:\n      return state\n  }\n}\n\nfunction postsBySubreddit(state = {}, action) {\n  switch (action.type) {\n    case INVALIDATE_SUBREDDIT:\n    case RECEIVE_POSTS:\n    case REQUEST_POSTS:\n      return Object.assign({}, state, {\n        [action.subreddit]: posts(state[action.subreddit], action)\n      })\n    default:\n      return state\n  }\n}\n\n// const rootReducer = combineReducers({\n//   postsBySubreddit,\n//   selectedSubreddit\n// })\n\nexport  {\n  postsBySubreddit,\n  selectedSubreddit\n}","//action 是把数据从应用传到store的有效载荷。它是store数据的唯一来源 一般会通过store.disparch()将action传到store\n\n//添加todo 任务的actions是这样的：\nlet  nextTodoId = 0\nimport {\n  ADD_TODO,\n  REMOVE_TODO,\n  SET_VISIBILITY_FILTER,\n  TOGGLE_TODO\n} from \"../constants/todoActionType\";\n//Action 创建函数 就是生成 action 的方法。“action” 和 “action 创建函数” 这两个概念很容易混在一起，使用时最好注意区分。\n//在 Redux 中的 action 创建函数只是简单的返回一个 action:\n\nexport const addTodo = text => {\n  return {\n    type: ADD_TODO,\n    text,\n    id : ++nextTodoId\n\n  };\n};\n//这样做将使action创建函数更容易被移至和测试\n\nexport const toggleTodo = id => {\n  return { type: TOGGLE_TODO, id };\n};\n\nexport const setVisibilityFilter = (filter) => {\n  return { type :SET_VISIBILITY_FILTER,filter}\n}","import React, { Component } from 'react';\n\nconst Todo = ({ onClick, completed, text }) => (\n  <li  onClick={onClick}\n  style ={{textDecoration:completed?'line-through':'none'}}>\n    {text}\n  </li>\n)\n\n\nexport default Todo;","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport default class Picker extends Component {\n  render() {\n    const { value, onChange, options } = this.props\n\n    return (\n      <span>\n        <h1>{value}</h1>\n        <select onChange={e => onChange(e.target.value)}\n                value={value}>\n          {options.map(option =>\n            <option value={option} key={option}>\n              {option}\n            </option>)\n          }\n        </select>\n      </span>\n    )\n  }\n}\n\nPicker.propTypes = {\n  options: PropTypes.arrayOf(\n    PropTypes.string.isRequired\n  ).isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired\n}","export const REQUEST_POSTS = 'REQUEST_POSTS'\nexport const RECEIVE_POSTS = 'RECEIVE_POSTS'\nexport const SELECT_SUBREDDIT = 'SELECT_SUBREDDIT'\nexport const INVALIDATE_SUBREDDIT = 'INVALIDATE_SUBREDDIT'\n\nexport function selectSubreddit(subreddit) {\n  return {\n    type: SELECT_SUBREDDIT,\n    subreddit\n  }\n}\n\nexport function invalidateSubreddit(subreddit) {\n  return {\n    type: INVALIDATE_SUBREDDIT,\n    subreddit\n  }\n}\n\nfunction requestPosts(subreddit) {\n  return {\n    type: REQUEST_POSTS,\n    subreddit\n  }\n}\n\nfunction receivePosts(subreddit, json) {\n  return {\n    type: RECEIVE_POSTS,\n    subreddit,\n    posts: json.data.children.map(child => child.data),\n    receivedAt: Date.now()\n  }\n}\n\nfunction fetchPosts(subreddit) {\n  return dispatch => {\n    dispatch(requestPosts(subreddit))\n    return fetch(`https://www.reddit.com/r/${subreddit}.json`)\n      .then(response => response.json())\n      .then(json => dispatch(receivePosts(subreddit, json)))\n  }\n}\n\nfunction shouldFetchPosts(state, subreddit) {\n  const posts = state.postsBySubreddit[subreddit]\n  if (!posts) {\n    return true\n  } else if (posts.isFetching) {\n    return false\n  } else {\n    return posts.didInvalidate\n  }\n}\n\nexport function fetchPostsIfNeeded(subreddit) {\n  return (dispatch, getState) => {\n    if (shouldFetchPosts(getState(), subreddit)) {\n      return dispatch(fetchPosts(subreddit))\n    }\n  }\n}","import React from 'react'\nimport Footer from './todo/Footer'\nimport AddTodo from '../containers/AppTodo'\nimport VisibleTodoList from '../containers/VisibilityTodoList'\n\nconst App = () => (\n  <div>\n    <AddTodo />\n    <VisibleTodoList />\n    <Footer />\n  </div>\n)\n\nexport default App","export const ADD_TODO = 'ADD_TODO';\nexport const REMOVE_TODO = 'REMOVE_TODO';\nexport const TOGGLE_TODO = 'TOGGLE_TODO';\nexport const SET_VISIBILITY_FILTER = 'SET_VISIBILITY_FILTER'\nexport const VisibilityFilters = {\n  SHOW_ALL: 'SHOW_ALL',\n  SHOW_COMPLETED: 'SHOW_COMPLETED',\n  SHOW_ACTIVE: 'SHOW_ACTIVE'\n}","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { createLogger } from \"redux-logger\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\n\nimport { crashReporter,logger} from './midddleware/logger';\n\nimport todoApp from \"./reducers\";\nimport App from \"./components/App\";\nimport AsyncApp from './asyncApp';\n\nlet store = createStore(\n  todoApp,\n  composeWithDevTools(\n    applyMiddleware(\n      thunkMiddleware,\n      logger\n      //dispatchAndLog\n    )\n  )\n);\n//applyMiddlewareByMoneypatching(store,[logger])\n//<Route path=\"/\" component={App} />\nrender(\n  <Provider store={store}>\n    <Router>\n      \n      <Route path=\"/reddit\" component={AsyncApp} />\n    </Router>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport {\n  selectSubreddit,\n  fetchPostsIfNeeded,\n  invalidateSubreddit\n} from './actions/subreddit'\nimport Picker from './components/reddit/Picker'\nimport Posts from './components/reddit/Posts'\nclass AsyncApp extends Component {\n  constructor(props) {\n    super(props)\n    this.handleChange = this.handleChange.bind(this)\n    this.handleRefreshClick = this.handleRefreshClick.bind(this)\n  }\n\n  // componentDidMount() {\n  //   const { dispatch, selectedSubreddit } = this.props\n  //   dispatch(fetchPostsIfNeeded(selectedSubreddit))\n  // }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.selectedSubreddit !== this.props.selectedSubreddit) {\n      const { dispatch, selectedSubreddit } = nextProps\n      dispatch(fetchPostsIfNeeded(selectedSubreddit))\n    }\n  }\n\n  handleChange(nextSubreddit) {\n    this.props.dispatch(selectSubreddit(nextSubreddit))\n  }\n\n  handleRefreshClick(e) {\n    e.preventDefault()\n\n    const { dispatch, selectedSubreddit } = this.props\n    dispatch(invalidateSubreddit(selectedSubreddit))\n    dispatch(fetchPostsIfNeeded(selectedSubreddit))\n  }\n\n  render() {\n    const { selectedSubreddit, posts, isFetching, lastUpdated } = this.props\n    return (\n      <div>\n        <Picker value={selectedSubreddit}\n                onChange={this.handleChange}\n                options={[ 'reactjs', 'frontend' ]} />\n        <p>\n          {lastUpdated &&\n            <span>\n              Last updated at {new Date(lastUpdated).toLocaleTimeString()}.\n              {' '}\n            </span>\n          }\n          {!isFetching &&\n            <a href='#'\n               onClick={this.handleRefreshClick}>\n              Refresh\n            </a>\n          }\n        </p>\n        {isFetching && posts.length === 0 &&\n          <h2>Loading...</h2>\n        }\n        {!isFetching && posts.length === 0 &&\n          <h2>Empty.</h2>\n        }\n        {posts.length > 0 &&\n          <div style={{ opacity: isFetching ? 0.5 : 1 }}>\n            <Posts posts={posts} />\n          </div>\n        }\n      </div>\n    )\n  }\n}\n\nAsyncApp.propTypes = {\n  selectedSubreddit: PropTypes.string.isRequired,\n  posts: PropTypes.array.isRequired,\n  isFetching: PropTypes.bool.isRequired,\n  lastUpdated: PropTypes.number,\n  dispatch: PropTypes.func.isRequired\n}\n\nfunction mapStateToProps(state) {\n  const { selectedSubreddit, postsBySubreddit } = state\n  const {\n    isFetching,\n    lastUpdated,\n    items: posts\n  } = postsBySubreddit[selectedSubreddit] || {\n    isFetching: true,\n    items: []\n  }\n\n  return {\n    selectedSubreddit,\n    posts,\n    isFetching,\n    lastUpdated\n  }\n}\n\nexport default connect(mapStateToProps)(AsyncApp)"],"sourceRoot":""}