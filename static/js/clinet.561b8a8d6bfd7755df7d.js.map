{"version":3,"sources":["webpack:///./src/reducers/todos.js","webpack:///./src/utils/client.js","webpack:///./src/reducers/visibilityFilter.js","webpack:///./src/components/reddit/Posts.js","webpack:///./src/reducers/index.js","webpack:///./src/reducers/subreddit.js","webpack:///./src/components/reddit/Picker.js","webpack:///./src/actions/subreddit.js","webpack:///./src/asyncApp.js"],"names":["state","action","type","id","text","completed","map","todo","_extends","n","l","__webpack_require__","_reactDom","_redux","_reactRedux","u","a","e","__esModule","default","preloadedState","window","__PRELOADED_STATE__","console","log","store","createStore","counterApp","hydrate","_react2","createElement","Provider","_asyncApp2","document","getElementById","ZAhb","t","d","Object","defineProperty","value","filter","_react","s","i","r","Posts","Component","render","this","props","posts","post","key","title","propTypes","PropTypes","array","isRequired","_subreddit","combineReducers","todos","visibilityFilter","postsBySubreddit","selectedSubreddit","INVALIDATE_SUBREDDIT","RECEIVE_POSTS","REQUEST_POSTS","assign","[object Object]","subreddit","isFetching","didInvalidate","items","lastUpdated","receivedAt","SELECT_SUBREDDIT","Picker","onChange","options","target","option","arrayOf","string","func","selectSubreddit","invalidateSubreddit","fetchPostsIfNeeded","dispatch","getState","fetch","then","response","json","data","children","child","Date","now","txfS","c","AsyncApp","constructor","super","handleChange","bind","handleRefreshClick","componentWillReceiveProps","nextProps","nextSubreddit","preventDefault","_Picker2","toLocaleTimeString","href","onClick","length","style","opacity","_Posts2","bool","number","connect"],"mappings":"8TAAc,EAACA,KAAYC,KACzB,OAAQA,EAAOC,MACb,IAAK,WACH,UACKF,GAEDG,GAAIF,EAAOE,GACXC,KAAMH,EAAOG,KACbC,eAGN,IAAK,cACH,OAAOL,EAAMM,IAAIC,GACdA,EAAKJ,KAAOF,EAAOE,GAApBK,KACQD,GAAMF,WAAYE,EAAKF,YAC3BE,GAER,QACE,OAAOP,wCClBb,IAAAS,EAAAC,EAAAC,EAAA,SACAC,EAAAD,EAAA,QACAE,EAAAF,EAAA,QACAG,EAAAH,EAAA,QAAAI,EAAAL,EACAC,EAAA,SAAAK,EAAAN,EACAC,EAAA,kBAAAD,EAAAO,GAAA,OAAAA,KAAAC,WAAAD,GAAAE,QAAAF,GAEA,MAAMG,EAAiBC,OAAOC,oBAC9BC,QAAQC,IAAKH,OAAOC,oBAAoB,eAGxC,MAAMG,KAAQZ,EAAAa,aAAYC,UAAYP,MAEtCR,EAAAgB,SACEC,EAAAV,QAAAW,cAAChB,EAAAiB,UAASN,MAAOA,GACfI,EAAAV,QAAAW,cAACE,EAAAb,QAAD,OAEFc,SAASC,eAAe,UAAAC,KAAA,SAAAlB,EAAAmB,EAAAC,GAAA,aAAAC,OAAAC,eAAAH,EAAA,cAAAI,OAAA,IAAAJ,EAAAjB,QCjBD,EAACnB,EAAQ,WAAYC,KAC5C,OAAQA,EAAOC,MACb,IAAK,wBACH,OAAOD,EAAOwC,OAChB,QACE,OAAOzC,yFCLb,IAAA0C,EAAA/B,EAAA,QAAAgC,EAAAC,EAAAnC,GAAAoC,EAAAD,EACAjC,EAAA,kBAAAiC,EAAA3B,GAAA,OAAAA,KAAAC,WAAAD,GAAAE,QAAAF,SAEqB6B,UAAcC,YACjCC,SACE,OACEnB,EAAAV,QAAAW,cAAA,UACGmB,KAAKC,MAAMC,MAAM7C,IAAI,CAAC8C,EAAMR,IAC3Bf,EAAAV,QAAAW,cAAA,MAAIuB,IAAKT,GAAIQ,EAAKE,oBALPR,EAYrBA,EAAMS,WACJJ,MAAOK,UAAUC,MAAMC,gGChBzB,IAAA7C,EAAAF,EAAA,QAAAgC,EAAA5B,EACAJ,EAAA,SAAAkC,EAAA9B,EACAJ,EAAA,SACAgD,EAAAhD,EAAA,iBAAAI,EAAAE,GAAA,OAAAA,KAAAC,WAAAD,GAAAE,QAAAF,GAAAmB,EAAAjB,SAAA,EAGeN,EAAA+C,kBACbC,gBACAC,2BACAC,oCACAC,0KCVFrD,EAAA,YACAgD,EAAAhD,EAAA,QAAAyB,EAiEE2B,iBAnBF,SAA0B/D,KAAYC,GACpC,OAAQA,EAAOC,MACb,KAAK+D,uBACL,KAAKC,gBACL,KAAKC,gBACH,OAAO7B,OAAO8B,UAAWpE,GACvBqE,CAACpE,EAAOqE,WApChB,SACEtE,GACEuE,cACAC,iBACAC,UAEFxE,GAEA,OAAQA,EAAOC,MACb,KAAK+D,uBACH,OAAO3B,OAAO8B,UAAWpE,GACvBwE,mBAEJ,KAAKL,gBACH,OAAO7B,OAAO8B,UAAWpE,GACvBuE,cACAC,mBAEJ,KAAKN,gBACH,OAAO5B,OAAO8B,UAAWpE,GACvBuE,cACAC,iBACAC,MAAOxE,EAAOkD,MACduB,YAAazE,EAAO0E,aAExB,QACE,OAAO3E,GA1Bb,CAoCkCA,EAAMC,EAAOqE,WAAYrE,KAEvD,QACE,OAAOD,MAWXgE,kBA3DF,SAA2BhE,EAAQ,UAAWC,GAC5C,OAAQA,EAAOC,MACf,KAAK0E,mBACH,OAAO3E,EAAOqE,UAChB,QACE,OAAOtE,wFCbX,IAAA0C,EAAA/B,EAAA,QAAAgC,EAAAC,EAAAnC,GAAAoC,EAAAD,EACAjC,EAAA,kBAAAiC,EAAA3B,GAAA,OAAAA,KAAAC,WAAAD,GAAAE,QAAAF,SAEqB4D,UAAe9B,YAClCC,SACE,MAAMR,MAAEA,EAAFsC,SAASA,EAATC,QAAmBA,GAAY9B,KAAKC,MAE1C,OACErB,EAAAV,QAAAW,cAAA,YACED,EAAAV,QAAAW,cAAA,UAAKU,GACLX,EAAAV,QAAAW,cAAA,UAAQgD,SAAU7D,GAAK6D,EAAS7D,EAAE+D,OAAOxC,OACjCA,MAAOA,GACZuC,EAAQzE,IAAI2E,GACXpD,EAAAV,QAAAW,cAAA,UAAQU,MAAOyC,EAAQ5B,IAAK4B,GACzBA,iBAXMJ,EAoBrBA,EAAOtB,WACLwB,QAASvB,UAAU0B,QACjB1B,UAAU2B,OAAOzB,YACjBA,WACFlB,MAAOgB,UAAU2B,OAAOzB,WACxBoB,SAAUtB,UAAU4B,KAAK1B,kGCvBX2B,gBAAT,SAAyBf,GAC9B,OACEpE,KAAM0E,EACNN,gBAIYgB,oBAAT,SAA6BhB,GAClC,OACEpE,KAAM+D,EACNK,gBAwCYiB,mBAAT,SAA4BjB,GACjC,MAAO,CAACkB,EAAUC,KAChB,GAbJ,SAA0BzF,EAAOsE,GAC/B,MAAMnB,EAAQnD,EAAM+D,iBAAiBO,GACrC,OAAKnB,IAEMA,EAAMoB,YAGRpB,EAAMqB,cAPjB,CAayBiB,IAAYnB,GAC/B,OAAOkB,EAvBb,SAAoBlB,GAClB,OAAOkB,IACLA,EAlBJ,SAAsBlB,GACpB,OACEpE,KAAMiE,EACNG,aAHJ,CAkB0BA,IACfoB,kCAAkCpB,UACtCqB,KAAKC,GAAYA,EAASC,QAC1BF,KAAKE,GAAQL,EAdpB,SAAsBlB,EAAWuB,GAC/B,OACE3F,KAAMgE,EACNI,YACAnB,MAUiD0C,EAVrCC,KAAKC,SAASzF,IAAI0F,GAASA,EAAMF,MAC7CnB,WAAYsB,KAAKC,OALrB,CAc0C5B,MAL1C,CAuBiCA,MA1D1B,MAAMH,kBAAgB,gBAChBD,kBAAgB,gBAChBU,qBAAmB,mBACnBX,yBAAuB,wBAAAkC,KAAA,SAAAlF,EAAAmB,EAAAC,GAAA,aAAAC,OAAAC,eAAAH,EAAA,cAAAI,OAAA,ICHpC,IAAAE,EAAA/B,EAAA,QAAAgC,EAAAyD,EAAA3F,GAAAoC,EAAAuD,EACAzF,EAAA,SACAG,EAAAH,EAAA,QACAgD,EAAAhD,EAAA,QAAAK,EAAAoF,EAKAzF,EAAA,SAAAD,EAAA0F,EACAzF,EAAA,kBAAAyF,EAAAnF,GAAA,OAAAA,KAAAC,WAAAD,GAAAE,QAAAF,SACMoF,UAAiBtD,YACrBuD,YAAYpD,GACVqD,MAAMrD,GACND,KAAKuD,aAAevD,KAAKuD,aAAaC,KAAKxD,MAC3CA,KAAKyD,mBAAqBzD,KAAKyD,mBAAmBD,KAAKxD,MAQzD0D,0BAA0BC,GACxB,GAAIA,EAAU5C,oBAAsBf,KAAKC,MAAMc,kBAAmB,CAChE,MAAMwB,SAAEA,EAAFxB,kBAAYA,GAAsB4C,EACxCpB,KAAS7B,EAAA4B,oBAAmBvB,KAIhCwC,aAAaK,GACX5D,KAAKC,MAAMsC,YAAS7B,EAAA0B,iBAAgBwB,IAGtCH,mBAAmBzF,GACjBA,EAAE6F,iBAEF,MAAMtB,SAAEA,EAAFxB,kBAAYA,GAAsBf,KAAKC,MAC7CsC,KAAS7B,EAAA2B,qBAAoBtB,IAC7BwB,KAAS7B,EAAA4B,oBAAmBvB,IAG9BhB,SACE,MAAMgB,kBAAEA,EAAFb,MAAqBA,EAArBoB,WAA4BA,EAA5BG,YAAwCA,GAAgBzB,KAAKC,MACnE,OACErB,EAAAV,QAAAW,cAAA,WACED,EAAAV,QAAAW,cAACiF,EAAA5F,SAAOqB,MAAOwB,EACPc,SAAU7B,KAAKuD,aACfzB,SAAW,UAAW,cAC9BlD,EAAAV,QAAAW,cAAA,SACG4C,GACC7C,EAAAV,QAAAW,cAAA,+BACmB,IAAImE,KAAKvB,GAAasC,qBADzC,IAEG,MAGHzC,GACA1C,EAAAV,QAAAW,cAAA,KAAGmF,KAAK,IACLC,QAASjE,KAAKyD,oBADjB,YAMHnC,GAA+B,IAAjBpB,EAAMgE,QACnBtF,EAAAV,QAAAW,cAAA,yBAEAyC,GAA+B,IAAjBpB,EAAMgE,QACpBtF,EAAAV,QAAAW,cAAA,oBAEDqB,EAAMgE,OAAS,GACdtF,EAAAV,QAAAW,cAAA,OAAKsF,OAASC,QAAS9C,EAAa,GAAM,IACxC1C,EAAAV,QAAAW,cAACwF,EAAAnG,SAAMgC,MAAOA,OAQ1BkD,EAAS9C,WACPS,kBAAmBR,UAAU2B,OAAOzB,WACpCP,MAAOK,UAAUC,MAAMC,WACvBa,WAAYf,UAAU+D,KAAK7D,WAC3BgB,YAAalB,UAAUgE,OACvBhC,SAAUhC,UAAU4B,KAAK1B,yBAsBZ5C,EAAA2G,SAnBf,SAAyBzH,GACvB,MAAMgE,kBAAEA,EAAFD,iBAAqBA,GAAqB/D,GAC1CuE,WACJA,EADIG,YAEJA,EACAD,MAAOtB,GACLY,EAAiBC,KACnBO,cACAE,UAGF,OACET,oBACAb,QACAoB,aACAG,gBAlBuBhB,CAsBa2C","file":"clinet.561b8a8d6bfd7755df7d.js","sourcesContent":["const todos = (state = [], action) => {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return [\n        ...state,\n        {\n          id: action.id,\n          text: action.text,\n          completed: false\n        }\n      ]\n    case 'TOGGLE_TODO':\n      return state.map(todo =>\n        (todo.id === action.id)\n          ? {...todo, completed: !todo.completed}\n          : todo\n      )\n    default:\n      return state\n  }\n}\n\nexport default todos","import React from 'react';\nimport { hydrate } from 'react-dom'\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport counterApp from '../reducers/index';\nimport App from '../asyncApp';\n// 通过服务端注入的全局变量得到初始 state\nconst preloadedState = window.__PRELOADED_STATE__\nconsole.log( window.__PRELOADED_STATE__,'00000000000');\n\n// 使用初始 state 创建 Redux store\nconst store = createStore(counterApp, preloadedState)\n\nhydrate(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)","const visibilityFilter = (state = 'SHOW_ALL', action) => {\n  switch (action.type) {\n    case 'SET_VISIBILITY_FILTER':\n      return action.filter\n    default:\n      return state\n  }\n}\n\nexport default visibilityFilter","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport default class Posts extends Component {\n  render() {\n    return (\n      <ul>\n        {this.props.posts.map((post, i) =>\n          <li key={i}>{post.title}</li>\n        )}\n      </ul>\n    )\n  }\n}\n\nPosts.propTypes = {\n  posts: PropTypes.array.isRequired\n}","import { combineReducers } from 'redux'\nimport todos from './todos'\nimport visibilityFilter from './visibilityFilter'\nimport {  postsBySubreddit,\n  selectedSubreddit} from './subreddit';\n\nexport default combineReducers({\n  todos,\n  visibilityFilter,\n  postsBySubreddit,\n  selectedSubreddit\n})","import { combineReducers } from 'redux'\nimport {\n  SELECT_SUBREDDIT,\n  INVALIDATE_SUBREDDIT,\n  REQUEST_POSTS,\n  RECEIVE_POSTS\n} from '../actions/subreddit.js'\n\nfunction selectedSubreddit(state = 'reactjs', action) {\n  switch (action.type) {\n  case SELECT_SUBREDDIT:\n    return action.subreddit\n  default:\n    return state\n  }\n}\n\nfunction posts(\n  state = {\n    isFetching: false,\n    didInvalidate: false,\n    items: []\n  },\n  action\n) {\n  switch (action.type) {\n    case INVALIDATE_SUBREDDIT:\n      return Object.assign({}, state, {\n        didInvalidate: true\n      })\n    case REQUEST_POSTS:\n      return Object.assign({}, state, {\n        isFetching: true,\n        didInvalidate: false\n      })\n    case RECEIVE_POSTS:\n      return Object.assign({}, state, {\n        isFetching: false,\n        didInvalidate: false,\n        items: action.posts,\n        lastUpdated: action.receivedAt\n      })\n    default:\n      return state\n  }\n}\n\nfunction postsBySubreddit(state = {}, action) {\n  switch (action.type) {\n    case INVALIDATE_SUBREDDIT:\n    case RECEIVE_POSTS:\n    case REQUEST_POSTS:\n      return Object.assign({}, state, {\n        [action.subreddit]: posts(state[action.subreddit], action)\n      })\n    default:\n      return state\n  }\n}\n\n// const rootReducer = combineReducers({\n//   postsBySubreddit,\n//   selectedSubreddit\n// })\n\nexport  {\n  postsBySubreddit,\n  selectedSubreddit\n}","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport default class Picker extends Component {\n  render() {\n    const { value, onChange, options } = this.props\n\n    return (\n      <span>\n        <h1>{value}</h1>\n        <select onChange={e => onChange(e.target.value)}\n                value={value}>\n          {options.map(option =>\n            <option value={option} key={option}>\n              {option}\n            </option>)\n          }\n        </select>\n      </span>\n    )\n  }\n}\n\nPicker.propTypes = {\n  options: PropTypes.arrayOf(\n    PropTypes.string.isRequired\n  ).isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired\n}","export const REQUEST_POSTS = 'REQUEST_POSTS'\nexport const RECEIVE_POSTS = 'RECEIVE_POSTS'\nexport const SELECT_SUBREDDIT = 'SELECT_SUBREDDIT'\nexport const INVALIDATE_SUBREDDIT = 'INVALIDATE_SUBREDDIT'\n\nexport function selectSubreddit(subreddit) {\n  return {\n    type: SELECT_SUBREDDIT,\n    subreddit\n  }\n}\n\nexport function invalidateSubreddit(subreddit) {\n  return {\n    type: INVALIDATE_SUBREDDIT,\n    subreddit\n  }\n}\n\nfunction requestPosts(subreddit) {\n  return {\n    type: REQUEST_POSTS,\n    subreddit\n  }\n}\n\nfunction receivePosts(subreddit, json) {\n  return {\n    type: RECEIVE_POSTS,\n    subreddit,\n    posts: json.data.children.map(child => child.data),\n    receivedAt: Date.now()\n  }\n}\n\nfunction fetchPosts(subreddit) {\n  return dispatch => {\n    dispatch(requestPosts(subreddit))\n    return fetch(`https://www.reddit.com/r/${subreddit}.json`)\n      .then(response => response.json())\n      .then(json => dispatch(receivePosts(subreddit, json)))\n  }\n}\n\nfunction shouldFetchPosts(state, subreddit) {\n  const posts = state.postsBySubreddit[subreddit]\n  if (!posts) {\n    return true\n  } else if (posts.isFetching) {\n    return false\n  } else {\n    return posts.didInvalidate\n  }\n}\n\nexport function fetchPostsIfNeeded(subreddit) {\n  return (dispatch, getState) => {\n    if (shouldFetchPosts(getState(), subreddit)) {\n      return dispatch(fetchPosts(subreddit))\n    }\n  }\n}","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport {\n  selectSubreddit,\n  fetchPostsIfNeeded,\n  invalidateSubreddit\n} from './actions/subreddit'\nimport Picker from './components/reddit/Picker'\nimport Posts from './components/reddit/Posts'\nclass AsyncApp extends Component {\n  constructor(props) {\n    super(props)\n    this.handleChange = this.handleChange.bind(this)\n    this.handleRefreshClick = this.handleRefreshClick.bind(this)\n  }\n\n  // componentDidMount() {\n  //   const { dispatch, selectedSubreddit } = this.props\n  //   dispatch(fetchPostsIfNeeded(selectedSubreddit))\n  // }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.selectedSubreddit !== this.props.selectedSubreddit) {\n      const { dispatch, selectedSubreddit } = nextProps\n      dispatch(fetchPostsIfNeeded(selectedSubreddit))\n    }\n  }\n\n  handleChange(nextSubreddit) {\n    this.props.dispatch(selectSubreddit(nextSubreddit))\n  }\n\n  handleRefreshClick(e) {\n    e.preventDefault()\n\n    const { dispatch, selectedSubreddit } = this.props\n    dispatch(invalidateSubreddit(selectedSubreddit))\n    dispatch(fetchPostsIfNeeded(selectedSubreddit))\n  }\n\n  render() {\n    const { selectedSubreddit, posts, isFetching, lastUpdated } = this.props\n    return (\n      <div>\n        <Picker value={selectedSubreddit}\n                onChange={this.handleChange}\n                options={[ 'reactjs', 'frontend' ]} />\n        <p>\n          {lastUpdated &&\n            <span>\n              Last updated at {new Date(lastUpdated).toLocaleTimeString()}.\n              {' '}\n            </span>\n          }\n          {!isFetching &&\n            <a href='#'\n               onClick={this.handleRefreshClick}>\n              Refresh\n            </a>\n          }\n        </p>\n        {isFetching && posts.length === 0 &&\n          <h2>Loading...</h2>\n        }\n        {!isFetching && posts.length === 0 &&\n          <h2>Empty.</h2>\n        }\n        {posts.length > 0 &&\n          <div style={{ opacity: isFetching ? 0.5 : 1 }}>\n            <Posts posts={posts} />\n          </div>\n        }\n      </div>\n    )\n  }\n}\n\nAsyncApp.propTypes = {\n  selectedSubreddit: PropTypes.string.isRequired,\n  posts: PropTypes.array.isRequired,\n  isFetching: PropTypes.bool.isRequired,\n  lastUpdated: PropTypes.number,\n  dispatch: PropTypes.func.isRequired\n}\n\nfunction mapStateToProps(state) {\n  const { selectedSubreddit, postsBySubreddit } = state\n  const {\n    isFetching,\n    lastUpdated,\n    items: posts\n  } = postsBySubreddit[selectedSubreddit] || {\n    isFetching: true,\n    items: []\n  }\n\n  return {\n    selectedSubreddit,\n    posts,\n    isFetching,\n    lastUpdated\n  }\n}\n\nexport default connect(mapStateToProps)(AsyncApp)"],"sourceRoot":""}